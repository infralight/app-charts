{{- if .Values.useStatefulSet }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.appName }}
  name: {{ .Values.appName }}
spec:
  serviceName: "{{ .Values.appName }}"
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.appName }}
  template:
    metadata:
      annotations:
        {{- if .Values.autoReloadConfig }}
        checksum/configuration: {{ include (print $.Template.BasePath "/" .Values.configmapName ".yaml" ) . | sha256sum }}
        {{- end }}
      labels:
        app.kubernetes.io/instance: {{ .Values.appName }}
        app.kubernetes.io/name: {{ .Values.appName }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{- range .Values.tolerations }}
        - effect: "{{ .effect }}"
          key: "{{ .key }}"
          operator: "{{ .operator }}"
          value: "{{ .value }}"
{{- end }}
{{- end }}
      {{- if .Values.affinity }}
      affinity:
{{- toYaml .Values.affinity | nindent 6 }}
      {{- end }} 
      containers:
      - image: "{{ trimPrefix "_" .Values.account }}.dkr.ecr.{{ .Values.region }}.amazonaws.com/{{ ne .Values.ecrAppName ""  | ternary .Values.ecrAppName .Values.appName }}:{{ .Values.tag }}"
{{- if .Values.containers.volumeMounts }}
        volumeMounts:
{{- range .Values.containers.volumeMounts }}
          - mountPath: {{ .mountPath }}
            name: {{ .name }}
{{- end }}
{{- end }}
{{- if .Values.containers.ports }}
        ports:
    {{- include "base.tplvalues.render" ( dict "value" .Values.containers.ports "context" $ ) | nindent 10 }}
{{- end }}
{{- if .Values.containers.env }}
        env:
    {{- include "base.tplvalues.render" ( dict "value" .Values.containers.env "context" $ ) | nindent 10 }}
{{- end }}
{{- if .Values.configMap }}
{{- if .Values.externalsecret }}
        envFrom:
          - configMapRef:
              name: {{ .Values.appName }}-config-map
          - secretRef:
              name:  {{ .Values.externalsecret.targetname }}
{{- else }}
        envFrom:
          - configMapRef:
              name: {{ .Values.appName }}-config-map
{{- end }}
{{- else if .Values.externalsecret }}
        envFrom:
          - secretRef:
              name:  {{ .Values.externalsecret.targetname }}
{{- end }}
      {{- if .Values.containers.securityContext }}
        securityContext:	
{{- toYaml .Values.containers.securityContext | nindent 10 }}
      {{- end }}
        name: {{ .Values.appName }}
        {{- if .Values.readinessProbe }}
        readinessProbe:
{{- toYaml .Values.readinessProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.livenessProbe }}
        livenessProbe:
{{- toYaml .Values.livenessProbe | nindent 10 }}
        {{- end }}
        resources:
{{- toYaml .Values.resources | nindent 10 }}
{{- if .Values.volumes }}
  volumes:	
    - name: {{ .Values.volumes.name }}
      persistentVolumeClaim:	
        claimName: {{ .Values.volumes.persistentVolumeClaim.name }}
{{- end }}
{{- if .Values.volumeClaimTemplates }}
  volumeClaimTemplates:
{{- range .Values.volumeClaimTemplates }}
  - metadata:
      name: {{ .metadata.name }}
    spec:
      accessModes:
        - {{ index .spec.accessModes 0 | quote }}
      storageClassName: {{ .spec.storageClassName | quote }}
      resources:
        requests:
          storage: {{ .spec.resources.requests.storage }}
{{- end }}
{{- end }}
{{- end }}